buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'eclipse'
	id 'maven-publish'
	id "org.sonarqube" version "3.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "dpanvil.refmap.json"
}

version = "${dpanvil_version}"
group = 'sirttas.dpanvil'
archivesBaseName = 'dpanvil'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
    	resources {
    		srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
        runtimeClasspath += api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.disableRefMap', 'true'

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.env.disableRefMap', 'true'

            args '--mod', 'dpanvil', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
    maven { url "https://maven.theillusivec4.top/" }
    maven { url "https://dvs1.progwml6.com/files/maven/" }
  	maven { url "https://modmaven.dev/" }
  	maven { url "https://maven.blamejared.com" }
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    
    annotationProcessor "org.spongepowered:mixin:${mixins_version}:processor"
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "DataPack Anvil",
            "Specification-Vendor": "dpanvil",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"dpanvil",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "dpanvil.mixins.json"
        ])
    }
    afterEvaluate {finalizedBy('reobfJar') }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate {finalizedBy('reobfJar') }
}

build.dependsOn tasks.apiJar

sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_DataPack-Anvil"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
    	properties["sonar.sources"] += sourceSets.api.allSource.srcDirs
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
             artifacts = [apiJar, jar]
        }
    }
    
    repositories {
        maven {
            url = 'https://modmaven.dev/artifactory/local-releases/'
            credentials {
                username = "${modmaven_user}"
                password = "${modmaven_password}"
            }
        }
    }
}
