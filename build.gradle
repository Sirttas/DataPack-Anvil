buildscript {
    repositories {
        mavenCentral()
        maven { url = 'https://maven.minecraftforge.net/' }
		maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
		maven { url = 'https://reposilite.shendai.rip/public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7-SNAPSHOT'
    }
}

plugins {
    id 'java'
    id 'eclipse'
	id 'maven-publish'
	id "org.sonarqube" version "3.0"
	id "com.matthewprenger.cursegradle" version '1.4.0'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "dpanvil.refmap.json"
}

version = project.hasProperty('tag_version') ? "${minecraft_version}-${tag_version}" : "${dpanvil_version}"
group = 'sirttas.dpanvil'
archivesBaseName = 'dpanvil'

println('Building DataPack Anvil: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
    	resources {
    		srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
        runtimeClasspath += api.output
	}
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', createSrgToMcp.output

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', createSrgToMcp.output

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
    
    annotationProcessor "org.spongepowered:mixin:${mixins_version}:processor"
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "DataPack Anvil",
            "Specification-Vendor": "dpanvil",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"dpanvil",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "MixinConfigs": "dpanvil.mixins.json"
        ])
    }
    afterEvaluate {finalizedBy('reobfJar') }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate {finalizedBy('reobfJar') }
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar

updateSourceSetMapping(sourceSets.api)

sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_DataPack-Anvil"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
	}
}

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def shendai_reposlite_user = System.getenv("SHENDAI_REPOSLITE_USER") ?: project.findProperty("shendai_reposlite_user")
def shendai_reposlite_password = System.getenv("SHENDAI_REPOSLITE_PASSWORD") ?: project.findProperty("shendai_reposlite_password")
def use_shendai_reposlite = shendai_reposlite_user != null && shendai_reposlite_password != null

if (use_modmaven || use_shendai_reposlite) {
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'DPAnvil'
	             artifacts = [apiJar, jar, sourcesJar]
	        }
	    }

		repositories {
			if (use_modmaven) {
				maven {
					url = 'https://modmaven.dev/artifactory/local-releases/'
					credentials {
						username = modmaven_user
						password = modmaven_password
					}
				}
			}
			if (use_shendai_reposlite) {
				maven {
					url = 'https://reposilite.shendai.rip/releases'
					credentials {
						username = shendai_reposlite_user
						password = shendai_reposlite_password
					}
				}
			}
		}
	}
}

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforge_key')) {
	curseforge {
		apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")
	
		def changeLog = { ->
			def generatedChangelog = ""
			def changeStart = false
			def changeEnd = false
			
			println('Changelog:')
			
			def changelogFile = file('changelog.txt').withReader { reader ->
				def line
			
		        while ((line = reader.readLine()) != null && !changeEnd) {
		        	if (line ==~ '^\\s*- .*') {
		        		changeStart = true
		        	} else if (changeStart) {
		        		changeEnd = true
		        	}
					if (changeStart && !changeEnd) {
						println(line)
						generatedChangelog += line + '\n'
					}
				}
			}
			return generatedChangelog
		}
	
		project {
			id = '432817'
			changelog = changeLog
			releaseType = "${curse_release_type}"
			mainArtifact(jar) { }
			addGameVersion "${minecraft_version}"
		}
	}
}
