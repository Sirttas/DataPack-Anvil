import net.darkhax.curseforgegradle.TaskPublishCurseForge

plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "${neogradle_version}"

	id "org.sonarqube" version "${sonar_version}"
	id 'net.darkhax.curseforgegradle' version '1.1.+'
	id "com.modrinth.minotaur" version "2.+"
}

version = project.hasProperty('tag_version') ? "${tag_version}" : "${dpanvil_version}"
group = 'sirttas.dpanvil'

repositories {
	mavenCentral()
	maven { url "https://repo.elementalcraft.org/public" }
}

base {
	archivesName = 'dpanvil'
}

logger.info('Building DataPack Anvil: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

sourceSets {
	api {
		java {
			srcDir 'src/api/java'
		}
	}
	main {
		resources {
			srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
		runtimeClasspath += api.output
	}
}

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
		systemProperty 'forge.logging.console.level', 'debug'
		systemProperty 'fml.earlyprogresswindow', 'false'
		systemProperty 'mixin.debug.verbose', 'true'
		systemProperty 'mixin.env.remapRefMap', 'true'

		modSource sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', 'dpanvil'
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', 'dpanvil'
		programArgument '--nogui'
	}
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
}


tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			minecraft_version: minecraft_version,
			minecraft_version_range: minecraft_version_range,
			neo_version: neo_version,
			neo_version_range: neo_version_range,
			loader_version_range: loader_version_range,
			pack_format_number: pack_format_number,

			dpanvil_version: dpanvil_version,
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand replaceProperties
	}
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "DataPack Anvil",
            "Specification-Vendor": "dpanvil",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"dpanvil",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar

updateSourceSetMapping(sourceSets.api)


sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_DataPack-Anvil"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
	}
}

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def elemental_craft_repo_user = System.getenv("ELEMENTAL_CRAFT_REPO_USER") ?: project.findProperty("elemental_craft_repo_user")
def elemental_craft_repo_password = System.getenv("ELEMENTAL_CRAFT_REPO_PASSWORD") ?: project.findProperty("elemental_craft_repo_password")
def use_elemental_craft_repo = elemental_craft_repo_user != null && elemental_craft_repo_password != null

if (use_modmaven || use_elemental_craft_repo) {
	if (use_modmaven) {
		logger.info("Maven publish setup for modmaven")
	}
	if (use_elemental_craft_repo) {
		logger.info("Maven publish setup for elementalcraft repo")
	}
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'DPAnvil'
	             artifacts = [apiJar, jar, sourcesJar]
	        }
	    }

		repositories {
			if (use_modmaven) {
				maven {
					name = "ModMaven"
					url = 'https://modmaven.dev/artifactory/local-releases/'
					credentials {
						username = modmaven_user
						password = modmaven_password
					}
				}
			}
			if (use_elemental_craft_repo) {
				maven {
					name = "ElementalCraftRepoLite"
					url = 'https://repo.elementalcraft.org/releases'
					credentials {
						username = elemental_craft_repo_user
						password = elemental_craft_repo_password
					}
				}
			}
		}
	}
}

def curseforge_key = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")
def modrinth_token = System.getenv("MODRINTH_TOKEN") ?: project.findProperty("modrinth_token")
def changeLog
def releaseVersions = List.of(project.getProperty("release_versions").split(","))

if (curseforge_key != null || modrinth_token != null) {
	def generatedChangelog = ""
	def changeStart = false
	def changeEnd = false

	println('Changelog:')

	file('changelog.txt').withReader { reader ->
		def line

		while ((line = reader.readLine()) != null && !changeEnd) {
			if (line ==~ '^\\s*- .*') {
				changeStart = true
			} else if (changeStart) {
				changeEnd = true
			}
			if (changeStart && !changeEnd) {
				println(line)
				generatedChangelog += line + '\n'
			}
		}
	}
	changeLog = generatedChangelog
}


if (curseforge_key != null) {
	tasks.register("curseforge", TaskPublishCurseForge, { task ->
		apiToken = curseforge_key

		task.upload(432817, jar) { main ->
			releaseType = "${release_type}"
			changelog = changeLog
			releaseVersions.each { v -> addGameVersion(v) }
		}
	})
}

if (modrinth_token != null) {
	modrinth {
		token = modrinth_token
		projectId = "7zu3jG0v"
		versionNumber = project.version
		versionType = "${release_type}"
		uploadFile = jar
		gameVersions = releaseVersions
		loaders.addAll("neoforge")
		changelog = changeLog
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8'
}
