buildscript {
    repositories {
        mavenCentral()
		maven { url = 'https://repo.elementalcraft.org/public' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
    id 'java'
    id 'eclipse'
	id 'maven-publish'
	id "org.sonarqube" version "${sonar_version}"
	id "com.matthewprenger.cursegradle" version '1.4.+'
	id "com.modrinth.minotaur" version "2.+"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

version = project.hasProperty('tag_version') ? "${minecraft_version}-${tag_version}" : "${dpanvil_version}"
group = 'sirttas.dpanvil'
archivesBaseName = 'dpanvil'

println('Building DataPack Anvil: ' + project.version)

java.toolchain.languageVersion = JavaLanguageVersion.of(17)
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

sourceSets {
    api {
        java {
            srcDir 'src/api/java'
        }
    }
    main {
    	resources {
    		srcDir 'src/generated/resources'
		}
		compileClasspath += api.output
        runtimeClasspath += api.output
	}
}

ext.updateSourceSetMapping = { sourceSet ->
	if (project.hasProperty('UPDATE_MAPPINGS')) {
		extractRangeMap.sources += sourceSet.java.srcDirs
		applyRangeMap.sources += sourceSet.java.srcDirs
		sourceSet.java.srcDirs.each { src -> 
			extractMappedNew.addTarget(src) 
		}
	}
}

configurations {
	apiCompile.extendsFrom(compile)
    apiImplementation.extendsFrom(implementation)
    apiCompileOnly.extendsFrom(compileOnly)
    apiRuntimeOnly.extendsFrom(runtimeOnly)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'fml.earlyprogresswindow', 'false'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            property 'mixin.debug.verbose', 'true'
            property 'mixin.env.remapRefMap', 'true'

            mods {
                dpanvil {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft "net.minecraftforge:forge:${forge_version}"
}

jar {
	from sourceSets.api.output
    from sourceSets.main.output
    
    manifest {
        attributes([
            "Specification-Title": "DataPack Anvil",
            "Specification-Vendor": "dpanvil",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"dpanvil",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
    afterEvaluate {finalizedBy('reobfJar') }
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    afterEvaluate {finalizedBy('reobfJar') }
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.api.allSource
    from sourceSets.main.allSource
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

build.dependsOn tasks.apiJar
build.dependsOn tasks.sourcesJar

updateSourceSetMapping(sourceSets.api)


sonarqube {
	properties {
    	property "sonar.projectKey", "Sirttas_DataPack-Anvil"
    	property "sonar.organization", "sirttas"
    	property "sonar.host.url", "https://sonarcloud.io"
    	properties["sonar.sources"] += sourceSets.api.java.srcDirs
	}
}

def modmaven_user = System.getenv("MODMAVEN_USER") ?: project.findProperty("modmaven_user")
def modmaven_password = System.getenv("MODMAVEN_PASSWORD") ?: project.findProperty("modmaven_password")
def use_modmaven = modmaven_user != null && modmaven_password != null
def elemental_craft_repo_user = System.getenv("ELEMENTAL_CRAFT_REPO_USER") ?: project.findProperty("elemental_craft_repo_user")
def elemental_craft_repo_password = System.getenv("ELEMENTAL_CRAFT_REPO_PASSWORD") ?: project.findProperty("elemental_craft_repo_password")
def use_elemental_craft_repo = elemental_craft_repo_user != null && elemental_craft_repo_password != null

if (use_modmaven || use_elemental_craft_repo) {
	if (use_modmaven) {
		logger.info("Maven publish setup for modmaven")
	}
	if (use_elemental_craft_repo) {
		logger.info("Maven publish setup for elementalcraft repo")
	}
	publishing {
	    publications {
	        mavenJava(MavenPublication) {
	        	artifactId = 'DPAnvil'
	             artifacts = [apiJar, jar, sourcesJar]
	        }
	    }

		repositories {
			if (use_modmaven) {
				maven {
					name = "ModMaven"
					url = 'https://modmaven.dev/artifactory/local-releases/'
					credentials {
						username = modmaven_user
						password = modmaven_password
					}
				}
			}
			if (use_elemental_craft_repo) {
				maven {
					name = "ElementalCraftRepoLite"
					url = 'https://repo.elementalcraft.org/releases'
					credentials {
						username = elemental_craft_repo_user
						password = elemental_craft_repo_password
					}
				}
			}
		}
	}
}

def curseforge_key = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforge_key")
def modrinth_token = System.getenv("MODRINTH_TOKEN") ?: project.findProperty("modrinth_token")
def changeLog
def releaseVersions = List.of(project.getProperty("release_versions").split(","))

if (curseforge_key != null || modrinth_token != null) {
	def generatedChangelog = ""
	def changeStart = false
	def changeEnd = false

	println('Changelog:')

	file('changelog.txt').withReader { reader ->
		def line

		while ((line = reader.readLine()) != null && !changeEnd) {
			if (line ==~ '^\\s*- .*') {
				changeStart = true
			} else if (changeStart) {
				changeEnd = true
			}
			if (changeStart && !changeEnd) {
				println(line)
				generatedChangelog += line + '\n'
			}
		}
	}
	changeLog = generatedChangelog
}

if (curseforge_key != null) {
	curseforge {
		apiKey = curseforge_key
	
		project {
			id = '432817'
			changelog = changeLog
			releaseType = "${release_type}"
			mainArtifact(jar) { }
			releaseVersions.each { v -> addGameVersion(v) }
		}
	}
}



if (modrinth_token != null) {
	modrinth {
		token = modrinth_token
		projectId = "7zu3jG0v"
		versionNumber = project.version
		versionType = "${release_type}"
		uploadFile = jar
		gameVersions = releaseVersions
		loaders = ["forge"]
		changelog = changeLog
	}
}
